{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1xj1SDBxOU8EUDN_bfhHhW7NeHxOvH13Z","timestamp":1744590811502},{"file_id":"1frn5NUlzxsT7VrWlwR6i8gI_KP0xwZdk","timestamp":1732236996713},{"file_id":"1MPGnBHHv2u6aQypHiwTInOfgO0kHxZS7","timestamp":1731656949138},{"file_id":"1zBamhJ3ZSpiln-5bDMm5US5Dk27zB3Zj","timestamp":1730713143358}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#파일은 공공데이터 포털의 전국의약품 도매업소 표준데이터에서 추출\n","# API Key는 구글 API Key 사용하여 진행\n","# 엑셀 파일 형식은 xls\n"],"metadata":{"id":"eQGD34Mdt54f"}},{"cell_type":"code","source":["from google.colab import files\n","import pandas as pd\n","import json\n","\n","# 엑셀 파일 업로드 (xls)\n","uploaded = files.upload()  # 코랩에서 파일 선택창 열림\n","\n","# 파일 이름 자동 탐지\n","filename = list(uploaded.keys())[0]\n","\n","# 엑셀 파일 읽기\n","df = pd.read_excel(filename)\n","\n","# 열 이름 확인\n","df.columns\n","\n","# 필요한 열만 추출해서 JSON으로 저장\n","df_filtered = df[['시설명', '위도', '경도']].rename(columns={\n","    '시설명': 'name',\n","    '위도': 'lat',\n","    '경도': 'lng'\n","})\n","\n","# JSON 파일로 저장\n","df_filtered.to_json(\"locations.json\", orient=\"records\", force_ascii=False)\n","\n","# locations_data 변수에 데이터 로드하기\n","locations_data = df_filtered.to_dict(orient=\"records\")\n","\n","api_key = '본인의 구글API_kEY실행전 꼭 바꾸기'  # ← 본인의 키로 교체!\n","\n","html_code = f\"\"\"\n","<!DOCTYPE html>\n","<html>\n","  <head>\n","    <meta charset=\"utf-8\">\n","    <title>전국 의약품 도매업소 지도</title>\n","    <style>\n","      #map {{ height: 100vh; width: 100%; }}\n","    </style>\n","  </head>\n","  <body>\n","    <h3 style=\"text-align:center;\">전국 의약품 도매업소 지도</h3>\n","    <div id=\"map\"></div>\n","\n","    <script>\n","      const locations = {json.dumps(locations_data, ensure_ascii=False)};\n","\n","      function initMap() {{\n","        const centerLatLng = {{ lat: 36.5, lng: 127.8 }};\n","        const map = new google.maps.Map(document.getElementById(\"map\"), {{\n","          zoom: 7,\n","          center: centerLatLng\n","        }});\n","\n","        locations.forEach(loc => {{\n","          const marker = new google.maps.Marker({{\n","            position: {{ lat: loc.lat, lng: loc.lng }},\n","            map: map,\n","            title: loc.name\n","          }});\n","\n","          const infowindow = new google.maps.InfoWindow({{\n","            content: `<strong>${{loc.name}}</strong>`\n","          }});\n","\n","          marker.addListener(\"click\", () => {{\n","            infowindow.open(map, marker);\n","          }});\n","        }});\n","      }}\n","    </script>\n","\n","    <script async\n","      src=\"https://maps.googleapis.com/maps/api/js?key={api_key}&callback=initMap\">\n","    </script>\n","  </body>\n","</html>\n","\"\"\"\n","\n","# HTML 파일로 저장\n","with open('map.html', 'w', encoding='utf-8') as f:\n","    f.write(html_code)\n","\n","# 생성된 HTML 파일 다운로드\n","files.download('map.html')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":76},"id":"79F9zLIqt5yn","executionInfo":{"status":"ok","timestamp":1744593164617,"user_tz":-540,"elapsed":12135,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"8583ebad-0645-41b3-c5a9-aefa598bcfc1"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-8defb6e1-37a2-4d80-ac40-3179cf786d17\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-8defb6e1-37a2-4d80-ac40-3179cf786d17\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving 전국의약품도매업소표준데이터-20250414.xls to 전국의약품도매업소표준데이터-20250414 (2).xls\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_6af51d26-1449-438a-bdac-72fb7d18cd00\", \"map.html\", 107348)"]},"metadata":{}}]}]}
{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM6qj+/ak3pe5i/yZx0BTtK"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"DD-6KAN4hz9l"},"outputs":[],"source":["# 필요한 라이브러리 불러오기\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.metrics import mean_absolute_percentage_error, r2_score\n","from statsmodels.tsa.holtwinters import SimpleExpSmoothing"]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","# 데이터 생성\n","np.random.seed(11111)\n","n_samples = 5 * 30  # 5개월간의 일자별 데이터\n","date_range = pd.date_range(start='2020-01-01', periods=n_samples, freq='D')\n","# 무작위 생성 변수\n","discount_rate = np.random.uniform(0.0, 0.5, size=n_samples)  # 할인율\n","clicks = np.random.randint(1000, 5000, size=n_samples)  # 클릭 수\n","conversion_rate = np.random.uniform(0.01, 0.1, size=n_samples)  # 전환율\n","weather = np.random.choice(['Sunny', 'Rainy', 'Cloudy', 'Snowy'], size=n_samples)  # 날씨\n","holiday = np.random.choice([0, 1], size=n_samples)  # 휴일 여부\n","# 기본 판매량\n","base_sales = 100"],"metadata":{"id":"JQmisRV8h3C6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 변수별 지수 영향 추가\n","sales = (base_sales +\n","         50 * discount_rate +\n","         0.02 * clicks +\n","         2000 * conversion_rate +\n","         np.random.normal(loc=0, scale=10, size=n_samples))  # 추가적인 무작위 잡음\n","# 데이터프레임 생성\n","data = {\n","    'Date': date_range,\n","    'Sales': sales,\n","    'Discount_Rate': discount_rate,\n","    'Clicks': clicks,\n","    'Conversion_Rate': conversion_rate,\n","    'Weather': weather,\n","    'Holiday': holiday\n","}\n","df = pd.DataFrame(data)"],"metadata":{"id":"QPedapV3h3Ji"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 요일과 순 정보 추가\n","df['Day'] = df['Date'].dt.day_name()\n","df['Period'] = np.where(df['Date'].dt.day <= 10, 'Early', np.where(df['Date'].dt.day <= 20, 'Mid', 'Late'))\n","# 순별 지수 영향 추가\n","period_indices = {\n","    'Early': 1.1,\n","    'Mid': 0.9,\n","    'Late': 1.0\n","}\n","df['Sales'] = df.apply(lambda row: row['Sales'] * period_indices[row['Period']], axis=1)\n","# 요일 지수 영향 추가 (월요일에서 목요일은 판매량 증가, 금요일에서 일요일은 판매량 감소)\n","day_indices = {\n","    'Monday': 1.2,\n","    'Tuesday': 1.2,\n","    'Wednesday': 1.2,\n","    'Thursday': 1.2,\n","    'Friday': 0.9,\n","    'Saturday': 0.9,\n","    'Sunday': 0.9\n","}\n","df['Sales'] = df.apply(lambda row: row['Sales'] * day_indices[row['Day']], axis=1)\n","# 날씨 지수 영향 추가 (비나 눈이 오는 날은 판매량 감소하게 셋팅)\n","weather_indices = {\n","    'Sunny': 1.0,\n","    'Cloudy': 0.95,\n","    'Rainy': 0.8,\n","    'Snowy': 0.7\n","}\n","df['Sales'] = df.apply(lambda row: row['Sales'] * weather_indices[row['Weather']], axis=1)"],"metadata":{"id":"NFZo_u0Hh3Lq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 데이터 시각화\n","plt.figure(figsize=(14, 7))\n","plt.plot(df['Date'], df['Sales'], label='Sales')\n","plt.title('Sales with Enhanced Seasonality, Trend, and Noise Over 5 Months')\n","plt.xlabel('Date')\n","plt.ylabel('Sales')\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n","df.head()"],"metadata":{"id":"x06QHFsYh3Nx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_encoded = pd.get_dummies(df, columns=['Weather', 'Day', 'Period'], drop_first=True)\n","df_encoded"],"metadata":{"id":"nUN5sA4lh3P3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 상관관계 확인\n","correlation_matrix = df_encoded.corr()\n","plt.figure(figsize=(12, 8))\n","sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\".2f\")\n","plt.title('Correlation Matrix')\n","plt.show()\n","df"],"metadata":{"id":"6AA7zA-Zh3R8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 요일별, 순별, 휴일 여부별 판매량 평균을 계산하여 시각화\n","fig, ax = plt.subplots(3, 1, figsize=(10, 10))\n","# 요일별 평균 판매량\n","sns.barplot(x='Day', y='Sales', data=df, order=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'], ax=ax[0])\n","ax[0].set_title('Average Sales by Day of the Week')\n","ax[0].set_ylabel('Average Sales')\n","# 순별 평균 판매량\n","sns.barplot(x='Period', y='Sales', data=df, order=['Early', 'Mid', 'Late'], ax=ax[1])\n","ax[1].set_title('Average Sales by Period of the Month')\n","ax[1].set_ylabel('Average Sales')\n","# 휴일 여부별 평균 판매량\n","sns.barplot(x='Holiday', y='Sales', data=df, ax=ax[2])\n","ax[2].set_title('Average Sales by Holiday')\n","ax[2].set_ylabel('Average Sales')\n","ax[2].set_xticklabels(['Non-Holiday', 'Holiday'])\n","plt.tight_layout()\n","plt.show()"],"metadata":{"id":"vXmo_nCkh3Tx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 날씨별 평균 판매량 시각화\n","plt.figure(figsize=(10, 6))\n","sns.barplot(x='Weather', y='Sales', data=df, order=['Sunny', 'Rainy', 'Cloudy', 'Snowy'])\n","plt.title('Average Sales by Weather Conditions')\n","plt.ylabel('Average Sales')\n","plt.show()"],"metadata":{"id":"XjQwq-urh3V6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df['TEST'] = df['Sales'].rolling(window=window).mean()"],"metadata":{"id":"P8tQUCfZh3Xz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 최적의 윈도우 크기 찾기\n","best_mape_moving = float('inf')  # 초기화: 최소 MAPE 값을 찾기 위해 무한대 값으로 설정\n","best_window = None  # 초기화: 최적의 윈도우 크기를 저장할 변수\n","for window in range(2, 11):  # 윈도우 크기 2 이상부터 시작\n","    # 이동평균을 계산하여 새로운 열 'Moving_Average'에 저장\n","    df['Moving_Average'] = df['Sales'].rolling(window=window).mean()\n","    # 이동평균을 사용하여 MAPE 계산, 계산은 윈도우 크기 이후의 데이터에 대해서만 수행\n","    mape = mean_absolute_percentage_error(df['Sales'][window:], df['Moving_Average'][window:])\n","    # 현재 계산된 MAPE가 이전 최소값보다 작으면 정보 업데이트\n","    if mape < best_mape_moving:\n","        best_mape_moving = mape  # 최소 MAPE를 업데이트\n","        best_window = window  # 최적의 윈도우 크기 업데이트\n","print(f\"최적의 윈도우 크기: {best_window}, MAPE: {best_mape_moving}\")"],"metadata":{"id":"hQqFrvIJh3Zx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 최적의 이동평균법 적용\n","df['Moving_Average'] = df['Sales'].rolling(window=best_window).mean()  # 최적의 윈도우 크기로 이동평균 계산\n","df"],"metadata":{"id":"RFMfCQbHkTiI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 일자별 실제값 / 예측값의 비율\n","df['Ratio'] = df['Sales'] / df['Moving_Average']\n","# 요일별 지수 계산 (요일별 지수 = 위에 계산된 Ratio의 요일별 평균)\n","day_indices = df.groupby('Day')['Ratio'].mean()\n","# 순별 지수 계산(요일별 지수 = 위에 계산된 Ratio의 순별 평균)\n","period_indices = df.groupby('Period')['Ratio'].mean()\n","print(\"\\n요일별 지수 (Ratio):\", day_indices)\n","print(\"순별 지수 (Ratio):\", period_indices)"],"metadata":{"id":"9wGIjCT-kTgT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 이동평균 예측값 조정\n","df['Adjusted_Moving_Average'] = df.apply(lambda row: row['Moving_Average'] * day_indices[row['Day']] * period_indices[row['Period']], axis=1)"],"metadata":{"id":"IsPxMvGGnmYS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["valid_indices = df[['Sales', 'Adjusted_Moving_Average']].dropna().index\n","# 유효한 인덱스를 사용하여 결측치가 없는 실제 판매 데이터를 가져옵니다.\n","sales = df.loc[valid_indices, 'Sales']\n","# 유효한 인덱스를 사용하여 결측치가 없는 조정된 이동평균 데이터를 가져옵니다.\n","adjusted_moving_average = df.loc[valid_indices, 'Adjusted_Moving_Average']"],"metadata":{"id":"Hi_CM3eSkTeO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 최종 모델 성능 평가\n","mape_moving = mean_absolute_percentage_error(sales, adjusted_moving_average)  # MAPE 계산\n","r2_moving = r2_score(sales, adjusted_moving_average)  # R^2 계산\n","print(\"\\n최종 모델 성능 평가 완료\")\n","print(\"Moving Average - MAPE:\", mape_moving)\n","print(\"Moving Average - R2:\", r2_moving)"],"metadata":{"id":"WuhH5SJ6kTcM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from statsmodels.tsa.holtwinters import SimpleExpSmoothing\n","# 최적의 smoothing_level 찾기\n","best_mape = float('inf')  # 초기 MAPE를 무한대로 설정하여 최소값을 찾기 위한 기준점을 마련\n","best_smoothing_level = None  # 최적의 smoothing_level을 저장할 변수 초기화\n","# smoothing_level의 범위를 0.01에서 0.99까지, 총 99개의 값으로 나누어 탐색\n","for smoothing_level in np.linspace(0.01, 0.99, 99):\n","    # SimpleExpSmoothing 모델을 특정 smoothing_level로 피팅\n","    fit = SimpleExpSmoothing(df['Sales']).fit(smoothing_level=smoothing_level, optimized=False)\n","    # 피팅 결과를 데이터프레임에 저장\n","    df['Exponential_Smoothing'] = fit.fittedvalues\n","    # MAPE를 계산하여 모델의 정확도 평가\n","    mape = mean_absolute_percentage_error(df['Sales'], df['Exponential_Smoothing'])\n","    # 현재 MAPE가 이전 최소값보다 작으면 정보 업데이트\n","    if mape < best_mape:\n","        best_mape = mape  # 최소 MAPE를 업데이트\n","        best_smoothing_level = smoothing_level  # 최적의 smoothing_level 업데이트\n","print(f\"최적의 smoothing_level: {best_smoothing_level}, MAPE: {best_mape}\")"],"metadata":{"id":"vigP9OXpkTaf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[" 최적의 지수평활법 모델 적용\n","fit = SimpleExpSmoothing(df['Sales']).fit(smoothing_level=best_smoothing_level, optimized=False)\n","df['Exponential_Smoothing'] = fit.fittedvalues\n","\n","# 일자별 실제값 대비 예측값의 비율 계산\n","df['Ratio'] = df['Sales'] / df['Exponential_Smoothing']\n","# 요일별 지수 계산\n","day_indices = df.groupby('Day')['Ratio'].mean()\n","# 순별 지수 계산\n","period_indices = df.groupby('Period')['Ratio'].mean()\n","print(\"\\n요일별 지수 (Ratio):\", day_indices)\n","print(\"순별 지수 (Ratio):\", period_indices)\n","\n","# 지수평활법 예측값 조정\n","df['Adjusted_Exponential_Smoothing'] = df.apply(lambda row: row['Exponential_Smoothing'] * day_indices[row['Day']] * period_indices[row['Period']], axis=1)\n","# 일치하는 인덱스에서 결측 값 제거\n","valid_indices = df[['Sales', 'Adjusted_Exponential_Smoothing']].dropna().index\n","sales = df.loc[valid_indices, 'Sales']\n","adjusted_exponential_smoothing = df.loc[valid_indices, 'Adjusted_Exponential_Smoothing']\n","# 최종 모델 성능 평가\n","mape_exponential_smoothing = mean_absolute_percentage_error(sales, adjusted_exponential_smoothing)\n","r2_exponential_smoothing = r2_score(sales, adjusted_exponential_smoothing)\n","print(\"\\n최종 모델 성능 평가 완료\")\n","print(\"Exponential Smoothing - MAPE:\", mape_exponential_smoothing)\n","print(\"Exponential Smoothing - R2:\", r2_exponential_smoothing)\n","\n","# 지수평활법 결과 시각화\n","plt.figure(figsize=(14, 7))\n","plt.plot(df['Date'], df['Sales'], label='Actual Sales', color='black', linewidth=1)\n","plt.plot(df['Date'], df['Adjusted_Exponential_Smoothing'], label='Adjusted Exponential Smoothing', color='blue', linestyle='--', linewidth=2)\n","plt.title('Exponential Smoothing Optimization')\n","plt.xlabel('Date')\n","plt.ylabel('Sales')\n","plt.legend()\n","plt.grid(True)\n","plt.tight_layout()\n","plt.show()\n","from sklearn.metrics import mean_squared_error, mean_absolute_error, mean_absolute_percentage_error\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","# 모델별 오차 계산 (MSE, MAE, RMSE, MAPE)\n","models = ['Moving_Average', 'Adjusted_Moving_Average', 'Exponential_Smoothing', 'Adjusted_Exponential_Smoothing']\n","errors = {'MSE': [], 'MAE': [], 'RMSE': [], 'MAPE': []}\n","# 각 모델에 대해 MSE, MAE, RMSE, MAPE 계산\n","for model in models:\n","    # 'Sales' 및 모델 예측값 모두에서 NaN 값을 제외한 데이터만 비교\n","    valid_indices = df[['Sales', model]].dropna().index\n","    actual_sales = df.loc[valid_indices, 'Sales']\n","    predicted_sales = df.loc[valid_indices, model]\n","    mse = mean_squared_error(actual_sales, predicted_sales)\n","    mae = mean_absolute_error(actual_sales, predicted_sales)\n","    rmse = np.sqrt(mse)\n","    mape = mean_absolute_percentage_error(actual_sales, predicted_sales)\n","    errors['MSE'].append(mse)\n","    errors['MAE'].append(mae)\n","    errors['RMSE'].append(rmse)\n","    errors['MAPE'].append(mape)\n","\n","# 오차 결과를 데이터프레임으로 변환\n","error_df = pd.DataFrame(errors, index=models)\n","# 오류율 비교 테이블 출력\n","print(\"Error Comparison Table:\")\n","print(error_df)\n","# Set the figure size and layout\n","fig, axes = plt.subplots(4, 1, figsize=(10, 24))\n","\n","# MSE plot\n","axes[0].bar(error_df.index, error_df['MSE'], color='blue')\n","axes[0].set_title('Comparison of MSE (Mean Squared Error)', fontsize=14)\n","axes[0].set_ylabel('MSE Value')\n","axes[0].grid(True)\n","# MAE plot\n","axes[1].bar(error_df.index, error_df['MAE'], color='green')\n","axes[1].set_title('Comparison of MAE (Mean Absolute Error)', fontsize=14)\n","axes[1].set_ylabel('MAE Value')\n","axes[1].grid(True)\n","# RMSE plot\n","axes[2].bar(error_df.index, error_df['RMSE'], color='red')\n","axes[2].set_title('Comparison of RMSE (Root Mean Squared Error)', fontsize=14)\n","axes[2].set_ylabel('RMSE Value')\n","axes[2].grid(True)\n","# MAPE plot\n","axes[3].bar(error_df.index, error_df['MAPE'], color='purple')\n","axes[3].set_title('Comparison of MAPE (Mean Absolute Percentage Error)', fontsize=14)\n","axes[3].set_ylabel('MAPE Value')\n","axes[3].grid(True)\n","# Adjust layout\n","plt.tight_layout()\n","plt.show()"],"metadata":{"id":"j0Yp2ra6kTYc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","# 4개의 모델에 대해 실제 판매량과 예측값 비교 시각화\n","plt.figure(figsize=(14, 14))\n","# 1. Moving Average 시각화\n","plt.subplot(4, 1, 1)\n","plt.plot(df['Date'], df['Sales'], label='Actual Sales', color='black', linewidth=1)\n","plt.plot(df['Date'], df['Moving_Average'], label='Moving Average', color='blue', linestyle='--', linewidth=2)\n","plt.title('Moving Average vs Actual Sales')\n","plt.xlabel('Date')\n","plt.ylabel('Sales')\n","plt.legend()\n","plt.grid(True)\n","# 2. Adjusted Moving Average 시각화\n","plt.subplot(4, 1, 2)\n","plt.plot(df['Date'], df['Sales'], label='Actual Sales', color='black', linewidth=1)\n","plt.plot(df['Date'], df['Adjusted_Moving_Average'], label='Adjusted Moving Average', color='green', linestyle='--', linewidth=2)\n","plt.title('Adjusted Moving Average vs Actual Sales')\n","plt.xlabel('Date')\n","plt.ylabel('Sales')\n","plt.legend()\n","plt.grid(True)\n","\n","# 4. Adjusted Exponential Smoothing 시각화\n","plt.subplot(4, 1, 4)\n","plt.plot(df['Date'], df['Sales'], label='Actual Sales', color='black', linewidth=1)\n","plt.plot(df['Date'], df['Adjusted_Exponential_Smoothing'], label='Adjusted Exponential Smoothing', color='purple', linestyle='--', linewidth=2)\n","plt.title('Adjusted Exponential Smoothing vs Actual Sales')\n","plt.xlabel('Date')\n","plt.ylabel('Sales')\n","plt.legend()\n","plt.grid(True)\n","plt.tight_layout()\n","plt.show()"],"metadata":{"id":"hc3H8FBykTWh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"oTlPu6XgkTUh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Klz2WM0MkTSS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"lJHF6WMSkTQC"},"execution_count":null,"outputs":[]}]}
{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"AvQsG42ve7MI"},"outputs":[],"source":["#train : 2016~2023년\n","#test : 2024년\n","#predict : 2025년"],"id":"AvQsG42ve7MI"},{"cell_type":"code","execution_count":null,"metadata":{"id":"Q3jrskSje7MO"},"outputs":[],"source":["import io\n","import pandas as pd\n","\n","train = pd.read_csv('/content/train.CSV', encoding='cp949')\n","test  = pd.read_csv('/content/test.CSV', encoding='cp949')\n","predict = pd.read_csv('/content/predict.CSV', encoding='cp949')"],"id":"Q3jrskSje7MO"},{"cell_type":"code","source":[],"metadata":{"id":"ML23wvYzCxmX"},"id":"ML23wvYzCxmX","execution_count":null,"outputs":[]},{"cell_type":"code","source":["train.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":335},"id":"KjRhZqnVDD21","executionInfo":{"status":"ok","timestamp":1734482533091,"user_tz":-540,"elapsed":20,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"52462679-3bc4-468c-8e0b-40e8cec049d1"},"id":"KjRhZqnVDD21","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["화주명              0\n","실적             542\n","년도/월/일           0\n","소사업명             0\n","계약여부(유지/종료)      0\n","계약주체(본사/지점)      0\n","직영/협력업체여부        0\n","기업규모             0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>화주명</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>실적</th>\n","      <td>542</td>\n","    </tr>\n","    <tr>\n","      <th>년도/월/일</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>소사업명</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>계약여부(유지/종료)</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>계약주체(본사/지점)</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>직영/협력업체여부</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>기업규모</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":78}]},{"cell_type":"code","source":["train['실적'] = train['실적'].fillna(0)"],"metadata":{"id":"sCbTNT3tL5S2"},"id":"sCbTNT3tL5S2","execution_count":null,"outputs":[]},{"cell_type":"code","source":["test.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":335},"id":"eIXrgF3WNEP7","executionInfo":{"status":"ok","timestamp":1734482533091,"user_tz":-540,"elapsed":19,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"d2482727-b43f-4200-c217-1435faa3a066"},"id":"eIXrgF3WNEP7","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["화주명             0\n","실적             36\n","년도/월/일          0\n","소사업명            0\n","계약여부(유지/종료)     0\n","계약주체(본사/지점)     0\n","직영/협력업체여부       0\n","기업규모            0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>화주명</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>실적</th>\n","      <td>36</td>\n","    </tr>\n","    <tr>\n","      <th>년도/월/일</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>소사업명</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>계약여부(유지/종료)</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>계약주체(본사/지점)</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>직영/협력업체여부</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>기업규모</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":80}]},{"cell_type":"code","source":["test['실적'] = test['실적'].fillna(0)"],"metadata":{"id":"s77N9LRaLixv"},"id":"s77N9LRaLixv","execution_count":null,"outputs":[]},{"cell_type":"code","source":["test.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":335},"id":"mWKktIlqLeIb","executionInfo":{"status":"ok","timestamp":1734482533091,"user_tz":-540,"elapsed":18,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"4e32cf73-dc05-46d5-be83-104cdb1373cb"},"id":"mWKktIlqLeIb","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["화주명            0\n","실적             0\n","년도/월/일         0\n","소사업명           0\n","계약여부(유지/종료)    0\n","계약주체(본사/지점)    0\n","직영/협력업체여부      0\n","기업규모           0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>화주명</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>실적</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>년도/월/일</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>소사업명</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>계약여부(유지/종료)</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>계약주체(본사/지점)</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>직영/협력업체여부</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>기업규모</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":82}]},{"cell_type":"code","source":["train['소사업명'].value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":272},"id":"9gyxb3rVgUjX","executionInfo":{"status":"ok","timestamp":1734482533091,"user_tz":-540,"elapsed":17,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"77cecadd-62ca-453c-ae86-b212dd585772"},"id":"9gyxb3rVgUjX","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["소사업명\n","일반화물    2538\n","컨테이너    1623\n","유통       237\n","유톻         3\n","중량물        1\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>소사업명</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>일반화물</th>\n","      <td>2538</td>\n","    </tr>\n","    <tr>\n","      <th>컨테이너</th>\n","      <td>1623</td>\n","    </tr>\n","    <tr>\n","      <th>유통</th>\n","      <td>237</td>\n","    </tr>\n","    <tr>\n","      <th>유톻</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>중량물</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":83}]},{"cell_type":"code","source":["print(train['실적'].dtypes)  # float64 또는 int64로 출력되어야 함\n","print(train.head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8qljodD7Lwcr","executionInfo":{"status":"ok","timestamp":1734482533091,"user_tz":-540,"elapsed":16,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"08b955b6-d34e-4ab2-f281-4f78b3ab1ad0"},"id":"8qljodD7Lwcr","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["object\n","             화주명    실적      년도/월/일  소사업명 계약여부(유지/종료) 계약주체(본사/지점) 직영/협력업체여부  \\\n","0           한화토탈  119   2016. 1. 1  컨테이너           Y          지점        직영   \n","1        롯데로지스틱스   75   2016. 1. 1  컨테이너           Y          지점        직영   \n","2         코오롱베니트   62   2016. 1. 1  컨테이너           Y          본사        직영   \n","3  한국유업(DH바이탈피드)   11   2016. 1. 1  컨테이너           Y          지점        직영   \n","4     보랄석고보드(유실)    7   2016. 1. 1  컨테이너           Y          지점        직영   \n","\n","   기업규모  \n","0   대기업  \n","1   대기업  \n","2   대기업  \n","3  중견기업  \n","4  중견기업  \n"]}]},{"cell_type":"code","source":["train.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_RE3J1cYOAXW","executionInfo":{"status":"ok","timestamp":1734482533091,"user_tz":-540,"elapsed":14,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"cee19e57-0694-4e21-c259-d9a931e5cffa"},"id":"_RE3J1cYOAXW","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 4402 entries, 0 to 4401\n","Data columns (total 8 columns):\n"," #   Column       Non-Null Count  Dtype \n","---  ------       --------------  ----- \n"," 0   화주명          4402 non-null   object\n"," 1   실적           4402 non-null   object\n"," 2   년도/월/일       4402 non-null   object\n"," 3   소사업명         4402 non-null   object\n"," 4   계약여부(유지/종료)  4402 non-null   object\n"," 5   계약주체(본사/지점)  4402 non-null   object\n"," 6   직영/협력업체여부    4402 non-null   object\n"," 7   기업규모         4402 non-null   object\n","dtypes: object(8)\n","memory usage: 275.2+ KB\n"]}]},{"cell_type":"code","source":["train.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"Ao3q18UmM9TN","executionInfo":{"status":"ok","timestamp":1734482533091,"user_tz":-540,"elapsed":12,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"101280a3-cd4f-4e6d-db2e-fdc97ab689b9"},"id":"Ao3q18UmM9TN","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             화주명    실적      년도/월/일  소사업명 계약여부(유지/종료) 계약주체(본사/지점) 직영/협력업체여부  \\\n","0           한화토탈  119   2016. 1. 1  컨테이너           Y          지점        직영   \n","1        롯데로지스틱스   75   2016. 1. 1  컨테이너           Y          지점        직영   \n","2         코오롱베니트   62   2016. 1. 1  컨테이너           Y          본사        직영   \n","3  한국유업(DH바이탈피드)   11   2016. 1. 1  컨테이너           Y          지점        직영   \n","4     보랄석고보드(유실)    7   2016. 1. 1  컨테이너           Y          지점        직영   \n","\n","   기업규모  \n","0   대기업  \n","1   대기업  \n","2   대기업  \n","3  중견기업  \n","4  중견기업  "],"text/html":["\n","  <div id=\"df-8d351ae5-86ae-4cd9-a624-45f15ac535c8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>화주명</th>\n","      <th>실적</th>\n","      <th>년도/월/일</th>\n","      <th>소사업명</th>\n","      <th>계약여부(유지/종료)</th>\n","      <th>계약주체(본사/지점)</th>\n","      <th>직영/협력업체여부</th>\n","      <th>기업규모</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>한화토탈</td>\n","      <td>119</td>\n","      <td>2016. 1. 1</td>\n","      <td>컨테이너</td>\n","      <td>Y</td>\n","      <td>지점</td>\n","      <td>직영</td>\n","      <td>대기업</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>롯데로지스틱스</td>\n","      <td>75</td>\n","      <td>2016. 1. 1</td>\n","      <td>컨테이너</td>\n","      <td>Y</td>\n","      <td>지점</td>\n","      <td>직영</td>\n","      <td>대기업</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>코오롱베니트</td>\n","      <td>62</td>\n","      <td>2016. 1. 1</td>\n","      <td>컨테이너</td>\n","      <td>Y</td>\n","      <td>본사</td>\n","      <td>직영</td>\n","      <td>대기업</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>한국유업(DH바이탈피드)</td>\n","      <td>11</td>\n","      <td>2016. 1. 1</td>\n","      <td>컨테이너</td>\n","      <td>Y</td>\n","      <td>지점</td>\n","      <td>직영</td>\n","      <td>중견기업</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>보랄석고보드(유실)</td>\n","      <td>7</td>\n","      <td>2016. 1. 1</td>\n","      <td>컨테이너</td>\n","      <td>Y</td>\n","      <td>지점</td>\n","      <td>직영</td>\n","      <td>중견기업</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8d351ae5-86ae-4cd9-a624-45f15ac535c8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8d351ae5-86ae-4cd9-a624-45f15ac535c8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8d351ae5-86ae-4cd9-a624-45f15ac535c8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c821f927-989c-41be-ad49-aa5733e7c7ef\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c821f927-989c-41be-ad49-aa5733e7c7ef')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c821f927-989c-41be-ad49-aa5733e7c7ef button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train","summary":"{\n  \"name\": \"train\",\n  \"rows\": 4402,\n  \"fields\": [\n    {\n      \"column\": \"\\ud654\\uc8fc\\uba85\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 186,\n        \"samples\": [\n          \"\\uc30d\\uc6a9\\ubca4\\ub354\\uc0ac\",\n          \"KCC \\ub2f9\\uc9c4\\uc601\\uc5c5\\uc18c\",\n          \"\\ud2f0\\ube44\\uc5e0\\ud574\\uc6b4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uc2e4\\uc801\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 499,\n        \"samples\": [\n          \"682 \",\n          \"233 \",\n          \"362 \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\ub144\\ub3c4/\\uc6d4/\\uc77c\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 108,\n        \"samples\": [\n          \"2022. 6. 1\",\n          \"2016. 11. 1\",\n          \"2016. 5. 1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uc18c\\uc0ac\\uc5c5\\uba85\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"\\uc77c\\ubc18\\ud654\\ubb3c\",\n          \"\\uc720\\ud1bb\",\n          \"\\uc911\\ub7c9\\ubb3c\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uacc4\\uc57d\\uc5ec\\ubd80(\\uc720\\uc9c0/\\uc885\\ub8cc)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"N\",\n          \"Y\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uacc4\\uc57d\\uc8fc\\uccb4(\\ubcf8\\uc0ac/\\uc9c0\\uc810)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"\\ubcf8\\uc0ac\",\n          \"\\uc9c0\\uc810\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uc9c1\\uc601/\\ud611\\ub825\\uc5c5\\uccb4\\uc5ec\\ubd80\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"\\ud611\\ub825\\uc5c5\\uccb4\",\n          \"\\uc9c1\\uc601\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uae30\\uc5c5\\uaddc\\ubaa8\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"\\uc911\\uacac\\uae30\\uc5c5\",\n          \"\\uacf5\\uacf5\\uae30\\uad00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":86}]},{"cell_type":"code","source":["test.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"n72zc5s5M_Bj","executionInfo":{"status":"ok","timestamp":1734482533482,"user_tz":-540,"elapsed":402,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"e846c3ac-1734-412c-c95c-a64bce3c7173"},"id":"n72zc5s5M_Bj","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            화주명   실적      년도/월/일  소사업명 계약여부(유지/종료) 계약주체(본사/지점) 직영/협력업체여부 기업규모\n","0       삼성디스플레이   20  2024. 1. 1  컨테이너           Y          본사      협력업체  대기업\n","1       삼성전자로지텍   94  2024. 1. 1  컨테이너           Y          본사        직영  대기업\n","2          한화토탈  337  2024. 1. 1  컨테이너           Y          지점        직영  대기업\n","3        코오롱글로텍   53  2024. 1. 1  컨테이너           Y          지점        직영  대기업\n","4  PCTC(기타-RAY)   34  2024. 1. 1  컨테이너           Y          지점        직영  대기업"],"text/html":["\n","  <div id=\"df-4fd52b38-876a-4dbf-ba19-c6697ef27c2d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>화주명</th>\n","      <th>실적</th>\n","      <th>년도/월/일</th>\n","      <th>소사업명</th>\n","      <th>계약여부(유지/종료)</th>\n","      <th>계약주체(본사/지점)</th>\n","      <th>직영/협력업체여부</th>\n","      <th>기업규모</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>삼성디스플레이</td>\n","      <td>20</td>\n","      <td>2024. 1. 1</td>\n","      <td>컨테이너</td>\n","      <td>Y</td>\n","      <td>본사</td>\n","      <td>협력업체</td>\n","      <td>대기업</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>삼성전자로지텍</td>\n","      <td>94</td>\n","      <td>2024. 1. 1</td>\n","      <td>컨테이너</td>\n","      <td>Y</td>\n","      <td>본사</td>\n","      <td>직영</td>\n","      <td>대기업</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>한화토탈</td>\n","      <td>337</td>\n","      <td>2024. 1. 1</td>\n","      <td>컨테이너</td>\n","      <td>Y</td>\n","      <td>지점</td>\n","      <td>직영</td>\n","      <td>대기업</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>코오롱글로텍</td>\n","      <td>53</td>\n","      <td>2024. 1. 1</td>\n","      <td>컨테이너</td>\n","      <td>Y</td>\n","      <td>지점</td>\n","      <td>직영</td>\n","      <td>대기업</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>PCTC(기타-RAY)</td>\n","      <td>34</td>\n","      <td>2024. 1. 1</td>\n","      <td>컨테이너</td>\n","      <td>Y</td>\n","      <td>지점</td>\n","      <td>직영</td>\n","      <td>대기업</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4fd52b38-876a-4dbf-ba19-c6697ef27c2d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4fd52b38-876a-4dbf-ba19-c6697ef27c2d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4fd52b38-876a-4dbf-ba19-c6697ef27c2d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c93fb1ff-a4e3-4be0-8277-87c8be27182a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c93fb1ff-a4e3-4be0-8277-87c8be27182a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c93fb1ff-a4e3-4be0-8277-87c8be27182a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"test","summary":"{\n  \"name\": \"test\",\n  \"rows\": 480,\n  \"fields\": [\n    {\n      \"column\": \"\\ud654\\uc8fc\\uba85\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 40,\n        \"samples\": [\n          \"\\uacc4\\uc591\\uc804\\uae30\",\n          \"KG\\uc2a4\\ud2f8\",\n          \"\\ud604\\ub300\\uae00\\ub85c\\ube44\\uc2a4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uc2e4\\uc801\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 186,\n        \"samples\": [\n          \"157\",\n          \"385\",\n          \"396\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\ub144\\ub3c4/\\uc6d4/\\uc77c\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"2024. 11. 1\",\n          \"2024. 10. 1\",\n          \"2024. 1. 1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uc18c\\uc0ac\\uc5c5\\uba85\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"\\ucee8\\ud14c\\uc774\\ub108\",\n          \"\\uc77c\\ubc18\\ud654\\ubb3c\",\n          \"\\uc720\\ud1b5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uacc4\\uc57d\\uc5ec\\ubd80(\\uc720\\uc9c0/\\uc885\\ub8cc)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"N\",\n          \"Y\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uacc4\\uc57d\\uc8fc\\uccb4(\\ubcf8\\uc0ac/\\uc9c0\\uc810)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"\\uc9c0\\uc810\",\n          \"\\ubcf8\\uc0ac\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uc9c1\\uc601/\\ud611\\ub825\\uc5c5\\uccb4\\uc5ec\\ubd80\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"\\uc9c1\\uc601\",\n          \"\\ud611\\ub825\\uc5c5\\uccb4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uae30\\uc5c5\\uaddc\\ubaa8\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"\\ub300\\uae30\\uc5c5\",\n          \"\\uc911\\uc18c\\uae30\\uc5c5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":87}]},{"cell_type":"code","source":["#train에 타겟 값 실적을 floats 형식으로 변환\n","# 실적 컬럼을 숫자로 변환 (문자나 오류값은 NaN 처리)\n","train['실적'] = pd.to_numeric(train['실적'], errors='coerce')\n","\n","# NaN이 포함된 행 확인\n","print(train[train['실적'].isna()])\n","\n","# 결측치를 0으로 대체\n","train['실적'].fillna(0, inplace=True)\n","\n","# 또는 결측치가 있는 행 제거\n","train.dropna(subset=['실적'], inplace=True)\n","\n","print(train['실적'].dtypes)  # float64 또는 int64로 출력되어야 함\n","print(train.head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DlLUSVfpOCA2","executionInfo":{"status":"ok","timestamp":1734482533483,"user_tz":-540,"elapsed":20,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"c2fdd3df-1e37-41b5-a77b-70ebc24e7f59"},"id":"DlLUSVfpOCA2","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              화주명  실적       년도/월/일  소사업명 계약여부(유지/종료) 계약주체(본사/지점) 직영/협력업체여부  \\\n","5             파세코 NaN   2016. 1. 1  컨테이너           N          지점        직영   \n","18            파세코 NaN   2016. 2. 1  컨테이너           N          지점        직영   \n","23    케이씨씨I/B(유실) NaN   2016. 2. 1  컨테이너           N          지점        직영   \n","24       기타(돌코리아) NaN   2016. 2. 1  컨테이너           Y          지점      협력업체   \n","25         극동티엘에스 NaN   2016. 2. 1  컨테이너           Y          지점        직영   \n","...           ...  ..          ...   ...         ...         ...       ...   \n","4377     엘에스오토모티브 NaN   2024. 8. 1    유통           N          본사      협력업체   \n","4382     엘에스오토모티브 NaN   2024. 9. 1    유통           N          본사      협력업체   \n","4387     엘에스오토모티브 NaN  2024. 10. 1    유통           N          본사      협력업체   \n","4392     엘에스오토모티브 NaN  2024. 11. 1    유통           N          본사      협력업체   \n","4397     엘에스오토모티브 NaN  2024. 12. 1    유통           N          본사      협력업체   \n","\n","      기업규모  \n","5     중견기업  \n","18    중견기업  \n","23     대기업  \n","24     대기업  \n","25    중소기업  \n","...    ...  \n","4377   대기업  \n","4382   대기업  \n","4387   대기업  \n","4392   대기업  \n","4397   대기업  \n","\n","[991 rows x 8 columns]\n","float64\n","             화주명     실적      년도/월/일  소사업명 계약여부(유지/종료) 계약주체(본사/지점) 직영/협력업체여부  \\\n","0           한화토탈  119.0  2016. 1. 1  컨테이너           Y          지점        직영   \n","1        롯데로지스틱스   75.0  2016. 1. 1  컨테이너           Y          지점        직영   \n","2         코오롱베니트   62.0  2016. 1. 1  컨테이너           Y          본사        직영   \n","3  한국유업(DH바이탈피드)   11.0  2016. 1. 1  컨테이너           Y          지점        직영   \n","4     보랄석고보드(유실)    7.0  2016. 1. 1  컨테이너           Y          지점        직영   \n","\n","   기업규모  \n","0   대기업  \n","1   대기업  \n","2   대기업  \n","3  중견기업  \n","4  중견기업  \n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-88-20bb944b6c13>:9: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  train['실적'].fillna(0, inplace=True)\n"]}]},{"cell_type":"code","source":["#test에 타겟 값 실적을 floats 형식으로 변환\n","# 실적 컬럼을 숫자로 변환 (문자나 오류값은 NaN 처리)\n","test['실적'] = pd.to_numeric(train['실적'], errors='coerce')\n","\n","# NaN이 포함된 행 확인\n","print(test[test['실적'].isna()])\n","\n","# 결측치를 0으로 대체\n","test['실적'].fillna(0, inplace=True)\n","\n","# 또는 결측치가 있는 행 제거\n","test.dropna(subset=['실적'], inplace=True)\n","\n","print(test['실적'].dtypes)  # float64 또는 int64로 출력되어야 함\n","print(test.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-EwNoyXDPTBq","executionInfo":{"status":"ok","timestamp":1734482533483,"user_tz":-540,"elapsed":18,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"3d3b2708-9236-4b5b-b8d6-0903cb221cc0"},"id":"-EwNoyXDPTBq","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Empty DataFrame\n","Columns: [화주명, 실적, 년도/월/일, 소사업명, 계약여부(유지/종료), 계약주체(본사/지점), 직영/협력업체여부, 기업규모]\n","Index: []\n","float64\n","            화주명     실적      년도/월/일  소사업명 계약여부(유지/종료) 계약주체(본사/지점) 직영/협력업체여부  \\\n","0       삼성디스플레이  119.0  2024. 1. 1  컨테이너           Y          본사      협력업체   \n","1       삼성전자로지텍   75.0  2024. 1. 1  컨테이너           Y          본사        직영   \n","2          한화토탈   62.0  2024. 1. 1  컨테이너           Y          지점        직영   \n","3        코오롱글로텍   11.0  2024. 1. 1  컨테이너           Y          지점        직영   \n","4  PCTC(기타-RAY)    7.0  2024. 1. 1  컨테이너           Y          지점        직영   \n","\n","  기업규모  \n","0  대기업  \n","1  대기업  \n","2  대기업  \n","3  대기업  \n","4  대기업  \n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-89-be667c7049d3>:9: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  test['실적'].fillna(0, inplace=True)\n"]}]},{"cell_type":"code","source":["train.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4ipjcYs6OB7O","executionInfo":{"status":"ok","timestamp":1734482533483,"user_tz":-540,"elapsed":15,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"b9588370-d93d-4372-cd36-72f81ae5b134"},"id":"4ipjcYs6OB7O","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 4402 entries, 0 to 4401\n","Data columns (total 8 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   화주명          4402 non-null   object \n"," 1   실적           4402 non-null   float64\n"," 2   년도/월/일       4402 non-null   object \n"," 3   소사업명         4402 non-null   object \n"," 4   계약여부(유지/종료)  4402 non-null   object \n"," 5   계약주체(본사/지점)  4402 non-null   object \n"," 6   직영/협력업체여부    4402 non-null   object \n"," 7   기업규모         4402 non-null   object \n","dtypes: float64(1), object(7)\n","memory usage: 275.2+ KB\n"]}]},{"cell_type":"code","source":["test.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bV5pUks-OB2n","executionInfo":{"status":"ok","timestamp":1734482533483,"user_tz":-540,"elapsed":13,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"476c1771-4414-499a-9fee-b6bc5f5d2620"},"id":"bV5pUks-OB2n","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 480 entries, 0 to 479\n","Data columns (total 8 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   화주명          480 non-null    object \n"," 1   실적           480 non-null    float64\n"," 2   년도/월/일       480 non-null    object \n"," 3   소사업명         480 non-null    object \n"," 4   계약여부(유지/종료)  480 non-null    object \n"," 5   계약주체(본사/지점)  480 non-null    object \n"," 6   직영/협력업체여부    480 non-null    object \n"," 7   기업규모         480 non-null    object \n","dtypes: float64(1), object(7)\n","memory usage: 30.1+ KB\n"]}]},{"cell_type":"code","source":["train.select_dtypes(include='object')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"RHbD_C0kLwXr","executionInfo":{"status":"ok","timestamp":1734482533483,"user_tz":-540,"elapsed":11,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"960cf2e2-fae3-44a2-bc83-291b790a3007"},"id":"RHbD_C0kLwXr","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                화주명       년도/월/일  소사업명 계약여부(유지/종료) 계약주체(본사/지점) 직영/협력업체여부  기업규모\n","0              한화토탈   2016. 1. 1  컨테이너           Y          지점        직영   대기업\n","1           롯데로지스틱스   2016. 1. 1  컨테이너           Y          지점        직영   대기업\n","2            코오롱베니트   2016. 1. 1  컨테이너           Y          본사        직영   대기업\n","3     한국유업(DH바이탈피드)   2016. 1. 1  컨테이너           Y          지점        직영  중견기업\n","4        보랄석고보드(유실)   2016. 1. 1  컨테이너           Y          지점        직영  중견기업\n","...             ...          ...   ...         ...         ...       ...   ...\n","4397       엘에스오토모티브  2024. 12. 1    유통           N          본사      협력업체   대기업\n","4398        만앤휴멜코리아  2024. 12. 1    유통           Y          지점      협력업체  중견기업\n","4399          레드캡투어  2024. 12. 1    유통           Y          지점      협력업체  중견기업\n","4400        피코이노베이션  2024. 12. 1    유통           Y          지점      협력업체  중소기업\n","4401   피코 운송셔틀(밀크런)  2024. 12. 1    유통           Y          지점      협력업체  중소기업\n","\n","[4402 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-80ffd5f4-07e2-4709-9f17-b3a18e48c98c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>화주명</th>\n","      <th>년도/월/일</th>\n","      <th>소사업명</th>\n","      <th>계약여부(유지/종료)</th>\n","      <th>계약주체(본사/지점)</th>\n","      <th>직영/협력업체여부</th>\n","      <th>기업규모</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>한화토탈</td>\n","      <td>2016. 1. 1</td>\n","      <td>컨테이너</td>\n","      <td>Y</td>\n","      <td>지점</td>\n","      <td>직영</td>\n","      <td>대기업</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>롯데로지스틱스</td>\n","      <td>2016. 1. 1</td>\n","      <td>컨테이너</td>\n","      <td>Y</td>\n","      <td>지점</td>\n","      <td>직영</td>\n","      <td>대기업</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>코오롱베니트</td>\n","      <td>2016. 1. 1</td>\n","      <td>컨테이너</td>\n","      <td>Y</td>\n","      <td>본사</td>\n","      <td>직영</td>\n","      <td>대기업</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>한국유업(DH바이탈피드)</td>\n","      <td>2016. 1. 1</td>\n","      <td>컨테이너</td>\n","      <td>Y</td>\n","      <td>지점</td>\n","      <td>직영</td>\n","      <td>중견기업</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>보랄석고보드(유실)</td>\n","      <td>2016. 1. 1</td>\n","      <td>컨테이너</td>\n","      <td>Y</td>\n","      <td>지점</td>\n","      <td>직영</td>\n","      <td>중견기업</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4397</th>\n","      <td>엘에스오토모티브</td>\n","      <td>2024. 12. 1</td>\n","      <td>유통</td>\n","      <td>N</td>\n","      <td>본사</td>\n","      <td>협력업체</td>\n","      <td>대기업</td>\n","    </tr>\n","    <tr>\n","      <th>4398</th>\n","      <td>만앤휴멜코리아</td>\n","      <td>2024. 12. 1</td>\n","      <td>유통</td>\n","      <td>Y</td>\n","      <td>지점</td>\n","      <td>협력업체</td>\n","      <td>중견기업</td>\n","    </tr>\n","    <tr>\n","      <th>4399</th>\n","      <td>레드캡투어</td>\n","      <td>2024. 12. 1</td>\n","      <td>유통</td>\n","      <td>Y</td>\n","      <td>지점</td>\n","      <td>협력업체</td>\n","      <td>중견기업</td>\n","    </tr>\n","    <tr>\n","      <th>4400</th>\n","      <td>피코이노베이션</td>\n","      <td>2024. 12. 1</td>\n","      <td>유통</td>\n","      <td>Y</td>\n","      <td>지점</td>\n","      <td>협력업체</td>\n","      <td>중소기업</td>\n","    </tr>\n","    <tr>\n","      <th>4401</th>\n","      <td>피코 운송셔틀(밀크런)</td>\n","      <td>2024. 12. 1</td>\n","      <td>유통</td>\n","      <td>Y</td>\n","      <td>지점</td>\n","      <td>협력업체</td>\n","      <td>중소기업</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4402 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-80ffd5f4-07e2-4709-9f17-b3a18e48c98c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-80ffd5f4-07e2-4709-9f17-b3a18e48c98c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-80ffd5f4-07e2-4709-9f17-b3a18e48c98c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0a2d2f0b-370b-4da5-801d-c7f80cfbcb79\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0a2d2f0b-370b-4da5-801d-c7f80cfbcb79')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0a2d2f0b-370b-4da5-801d-c7f80cfbcb79 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"train\",\n  \"rows\": 4402,\n  \"fields\": [\n    {\n      \"column\": \"\\ud654\\uc8fc\\uba85\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 186,\n        \"samples\": [\n          \"\\uc30d\\uc6a9\\ubca4\\ub354\\uc0ac\",\n          \"KCC \\ub2f9\\uc9c4\\uc601\\uc5c5\\uc18c\",\n          \"\\ud2f0\\ube44\\uc5e0\\ud574\\uc6b4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\ub144\\ub3c4/\\uc6d4/\\uc77c\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 108,\n        \"samples\": [\n          \"2022. 6. 1\",\n          \"2016. 11. 1\",\n          \"2016. 5. 1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uc18c\\uc0ac\\uc5c5\\uba85\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"\\uc77c\\ubc18\\ud654\\ubb3c\",\n          \"\\uc720\\ud1bb\",\n          \"\\uc911\\ub7c9\\ubb3c\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uacc4\\uc57d\\uc5ec\\ubd80(\\uc720\\uc9c0/\\uc885\\ub8cc)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"N\",\n          \"Y\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uacc4\\uc57d\\uc8fc\\uccb4(\\ubcf8\\uc0ac/\\uc9c0\\uc810)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"\\ubcf8\\uc0ac\",\n          \"\\uc9c0\\uc810\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uc9c1\\uc601/\\ud611\\ub825\\uc5c5\\uccb4\\uc5ec\\ubd80\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"\\ud611\\ub825\\uc5c5\\uccb4\",\n          \"\\uc9c1\\uc601\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\uae30\\uc5c5\\uaddc\\ubaa8\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"\\uc911\\uacac\\uae30\\uc5c5\",\n          \"\\uacf5\\uacf5\\uae30\\uad00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":92}]},{"cell_type":"code","source":["#원핫 인코딩 통해서 object 값들 인코딩 하기\n","\n","train = pd.get_dummies(train)\n","test = pd.get_dummies(test)\n"],"metadata":{"id":"vsDq-LWoLwVa"},"id":"vsDq-LWoLwVa","execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(train.shape, test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"POCfpYydPwdq","executionInfo":{"status":"ok","timestamp":1734482533483,"user_tz":-540,"elapsed":10,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"6a605829-93fb-4459-adbc-46458f8dc8d4"},"id":"POCfpYydPwdq","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(4402, 310) (480, 65)\n"]}]},{"cell_type":"code","source":["#데이터 분리\n","from sklearn.model_selection import train_test_split\n","X_tr, X_val, y_tr, y_val = train_test_split(train.drop('실적', axis=1),\n","                                            train['실적'],\n","                                            test_size=0.2,\n","                                            random_state=0)\n"],"metadata":{"id":"6iV6mOw3LwTD"},"id":"6iV6mOw3LwTD","execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(X_tr.shape, X_val.shape, y_tr.shape, y_val.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7lakSaXnLwQb","executionInfo":{"status":"ok","timestamp":1734482533483,"user_tz":-540,"elapsed":8,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"7d986b73-9122-45b6-9636-5a99a017135d"},"id":"7lakSaXnLwQb","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(3521, 309) (881, 309) (3521,) (881,)\n"]}]},{"cell_type":"code","source":["#실적 = 회귀모델\n","#선형회귀\n","#랜포\n","#XGboost\n","#의사결정나무\n","\n","#평가지표\n","\n","from sklearn.metrics import root_mean_squared_error\n","def rmse(y_true, y_pred):\n","    return mean_squared_error(y_true, y_pred)**0.5\n","rmse = root_mean_squared_error"],"metadata":{"id":"lAzqJKt9SEOZ"},"id":"lAzqJKt9SEOZ","execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Train 데이터의 Feature 순서 확인\n","print(\"Train Feature 순서:\", list(X_tr.columns))\n","\n","# Test 데이터의 Feature 순서 확인\n","print(\"Test Feature 순서:\", list(test.columns))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zWuD9ZyUNwRx","executionInfo":{"status":"ok","timestamp":1734482542162,"user_tz":-540,"elapsed":386,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"1ab8cea2-0d4d-434b-949e-f7aa5dde6229"},"id":"zWuD9ZyUNwRx","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train Feature 순서: ['화주명_BBC차터링코리아', '화주명_EAS쉬핑', '화주명_KCC (당진)-도료', '화주명_KCC (대죽1공장)', '화주명_KCC (대죽2공장)', '화주명_KCC 당진영업소', '화주명_KCC 대죽1공장', '화주명_KCC 대죽공장 V/C', '화주명_KCC(탈황석고)', '화주명_KCC실리콘 대죽', '화주명_KG스틸', '화주명_KG스틸(당진창고)', '화주명_KG스틸(창고보관)', '화주명_KG스틸(평택창고)', '화주명_LS오토모티브', '화주명_PCTC(기타-RAY)', '화주명_PTOC(돌코리아)', '화주명_PTOC(한국머스크)', '화주명_USG보랄(공장)', '화주명_USG보랄(창고)', '화주명_경산씨앤엘', '화주명_경산씨앤엘(신규)', '화주명_경평물류', '화주명_계양전기', '화주명_고려종합국제운송', '화주명_구산물류', '화주명_그린케미칼', '화주명_그린케미칼(아이디스)', '화주명_그린케미칼(야적장)', '화주명_그린케미칼/아이디스', '화주명_극동티엘에스', '화주명_극동티엘에스(에이비에스)', '화주명_글로벌세라믹', '화주명_글로비스(대한철강)', '화주명_글로비스(보관)', '화주명_기타', '화주명_기타(단건화주)', '화주명_기타(돌코리아)', '화주명_기타(운송부대 등)', '화주명_대림산업', '화주명_대림산업보일러', '화주명_대산강업', '화주명_대한그린에너지', '화주명_대한네트웍스', '화주명_대한네트웍스(제강)', '화주명_대한수출포장', '화주명_대한제강', '화주명_대한제강 V/C', '화주명_돌코리아', '화주명_동방', '화주명_동방(PNCT)', '화주명_동원로엑스', '화주명_레드캡투어', '화주명_로드스타씨앤에어', '화주명_롯데글로벌', '화주명_롯데글로벌(렌터카)', '화주명_롯데글로벌(쌍차)', '화주명_롯데글로벌로지스', '화주명_롯데로지스틱스', '화주명_마일스톤코리아(PJ알텍)', '화주명_만앤휴멜', '화주명_만앤휴멜(서산)', '화주명_만앤휴멜(서산/아산/화성)', '화주명_만앤휴멜(화성/아산)', '화주명_만앤휴멜코리아', '화주명_만해항운한국', '화주명_베스타스코리아', '화주명_보랄석고보드(유실)', '화주명_삼미푸드웰', '화주명_삼성SDI', '화주명_삼성디스플레이', '화주명_삼성목재', '화주명_삼성전자로지텍', '화주명_삼성전자로지텍(ODCY)', '화주명_삼성중공업', '화주명_서경로지텍', '화주명_세방(C4I)', '화주명_세방(롯데글로벌로지스)', '화주명_스미후루(장비상하차)', '화주명_스미후루코리아', '화주명_스틸임펙스', '화주명_스틸임펙스(보관)', '화주명_스틸임펙스(운송)', '화주명_신규(글로벌세라믹)', '화주명_신규(단건)대한수출포장', '화주명_신규(롯데주류)', '화주명_신규(마일스톤코리아)', '화주명_신규(보랄석고보드(제품))', '화주명_신규(서울바이오50%)', '화주명_신규(세방)', '화주명_신규(스틸임펙스)', '화주명_신규(에이치앤피)', '화주명_신규(엘피코)', '화주명_신규(엠스틸)', '화주명_신규(영진프라임)', '화주명_신규(용마(수석))', '화주명_신규(유수로지스틱스)', '화주명_신규(이든텍)', '화주명_신규(주한미군(DPM)', '화주명_신규(청원씨엠에스)', '화주명_신규(케이씨씨 탈황석고)', '화주명_신규(코오롱글로텍)', '화주명_신규(풍기산업)', '화주명_신규(한국지엠)', '화주명_신규(한익스프레스)', '화주명_신규(현대글로비스(후판))', '화주명_신규(혜인자원)', '화주명_쌍용벤더사', '화주명_쌍용자동차', '화주명_아이디스해운항공', '화주명_에스와이씨', '화주명_에스피프레시', '화주명_에이스지앤월드', '화주명_에이엔씨인터내셔널', '화주명_에이치앤피(KCC)', '화주명_에이치앤피(설비)', '화주명_에프앤로드코리아', '화주명_엘에스오토모티브', '화주명_엘에스전선', '화주명_엘에스통신', '화주명_엠스틸', '화주명_엠케이솔라', '화주명_용마로지스(당진)', '화주명_용마로지스(청주상주)', '화주명_우진물산', '화주명_운송부대 및 기타', '화주명_원해운', '화주명_유나이티드라인', '화주명_유로라인글로벌', '화주명_이노블록', '화주명_주성씨앤에어', '화주명_주한미군', '화주명_주한미군(DPM)', '화주명_주한미군(FMB)', '화주명_주한미군(YRP)', '화주명_주한미군(YRP) 신규', '화주명_중국해운', '화주명_중국해운한국', '화주명_지티로지스틱', '화주명_지티로지스틱(자전거)', '화주명_진원', '화주명_청원씨엠에스', '화주명_청호나이스', '화주명_케이디에스', '화주명_케이씨씨(김천)', '화주명_케이씨씨(문막)', '화주명_케이씨씨(보락스)', '화주명_케이씨씨(삼광목재)', '화주명_케이씨씨(세종)', '화주명_케이씨씨(원료)', '화주명_케이씨씨(제품)', '화주명_케이씨씨(탈황석고)', '화주명_케이씨씨I/B(유실)', '화주명_코스코쉬핑(대산)', '화주명_코스코쉬핑(블레이드)', '화주명_코스코쉬핑(신규)', '화주명_코스코쉬핑(평택)', '화주명_코스코쉬핑한국', '화주명_코오롱글로텍', '화주명_코오롱글로텍(신규)', '화주명_코오롱베니트', '화주명_크나우프(곤지암)', '화주명_크나우프(당진공장)', '화주명_크나우프(중부창고)', '화주명_타스해운, 삼미푸드웰', '화주명_티비엠해운', '화주명_파세코', '화주명_평택컨테이너터미날', '화주명_평택컨테이너터미날(기타-RAY)', '화주명_포스코인터내셔널', '화주명_피노', '화주명_피코 운송셔틀(밀크런)', '화주명_피코이노베이션', '화주명_한국머스크(담코로지스틱스)', '화주명_한국유업(DH바이탈피드)', '화주명_한국지엠', '화주명_한신로지스틱', '화주명_한익스프레스', '화주명_한화토탈', '화주명_해오름물류', '화주명_현대글로비스', '화주명_현대글로비스(운송)', '화주명_현대글로비스(제철)', '화주명_현대글로비스(후판(DS))', '화주명_현대글로비스(후판보관)', '화주명_현대스틸산업', '년도/월/일_2016. 1. 1', '년도/월/일_2016. 10. 1', '년도/월/일_2016. 11. 1', '년도/월/일_2016. 12. 1', '년도/월/일_2016. 2. 1', '년도/월/일_2016. 3. 1', '년도/월/일_2016. 4. 1', '년도/월/일_2016. 5. 1', '년도/월/일_2016. 6. 1', '년도/월/일_2016. 7. 1', '년도/월/일_2016. 8. 1', '년도/월/일_2016. 9. 1', '년도/월/일_2017. 1. 1', '년도/월/일_2017. 10. 1', '년도/월/일_2017. 11. 1', '년도/월/일_2017. 12. 1', '년도/월/일_2017. 2. 1', '년도/월/일_2017. 3. 1', '년도/월/일_2017. 4. 1', '년도/월/일_2017. 5. 1', '년도/월/일_2017. 6. 1', '년도/월/일_2017. 7. 1', '년도/월/일_2017. 8. 1', '년도/월/일_2017. 9. 1', '년도/월/일_2018. 1. 1', '년도/월/일_2018. 10. 1', '년도/월/일_2018. 11. 1', '년도/월/일_2018. 12. 1', '년도/월/일_2018. 2. 1', '년도/월/일_2018. 3. 1', '년도/월/일_2018. 4. 1', '년도/월/일_2018. 5. 1', '년도/월/일_2018. 6. 1', '년도/월/일_2018. 7. 1', '년도/월/일_2018. 8. 1', '년도/월/일_2018. 9. 1', '년도/월/일_2019. 1. 1', '년도/월/일_2019. 10. 1', '년도/월/일_2019. 11. 1', '년도/월/일_2019. 12. 1', '년도/월/일_2019. 2. 1', '년도/월/일_2019. 3. 1', '년도/월/일_2019. 4. 1', '년도/월/일_2019. 5. 1', '년도/월/일_2019. 6. 1', '년도/월/일_2019. 7. 1', '년도/월/일_2019. 8. 1', '년도/월/일_2019. 9. 1', '년도/월/일_2020. 1. 1', '년도/월/일_2020. 10. 1', '년도/월/일_2020. 11. 1', '년도/월/일_2020. 12. 1', '년도/월/일_2020. 2. 1', '년도/월/일_2020. 3. 1', '년도/월/일_2020. 4. 1', '년도/월/일_2020. 5. 1', '년도/월/일_2020. 6. 1', '년도/월/일_2020. 7. 1', '년도/월/일_2020. 8. 1', '년도/월/일_2020. 9. 1', '년도/월/일_2021. 1. 1', '년도/월/일_2021. 10. 1', '년도/월/일_2021. 11. 1', '년도/월/일_2021. 12. 1', '년도/월/일_2021. 2. 1', '년도/월/일_2021. 3. 1', '년도/월/일_2021. 4. 1', '년도/월/일_2021. 5. 1', '년도/월/일_2021. 6. 1', '년도/월/일_2021. 7. 1', '년도/월/일_2021. 8. 1', '년도/월/일_2021. 9. 1', '년도/월/일_2022. 1. 1', '년도/월/일_2022. 10. 1', '년도/월/일_2022. 11. 1', '년도/월/일_2022. 12. 1', '년도/월/일_2022. 2. 1', '년도/월/일_2022. 3. 1', '년도/월/일_2022. 4. 1', '년도/월/일_2022. 5. 1', '년도/월/일_2022. 6. 1', '년도/월/일_2022. 7. 1', '년도/월/일_2022. 8. 1', '년도/월/일_2022. 9. 1', '년도/월/일_2023. 1. 1', '년도/월/일_2023. 10. 1', '년도/월/일_2023. 11. 1', '년도/월/일_2023. 12. 1', '년도/월/일_2023. 2. 1', '년도/월/일_2023. 3. 1', '년도/월/일_2023. 4. 1', '년도/월/일_2023. 5. 1', '년도/월/일_2023. 6. 1', '년도/월/일_2023. 7. 1', '년도/월/일_2023. 8. 1', '년도/월/일_2023. 9. 1', '년도/월/일_2024. 1. 1', '년도/월/일_2024. 10. 1', '년도/월/일_2024. 11. 1', '년도/월/일_2024. 12. 1', '년도/월/일_2024. 2. 1', '년도/월/일_2024. 3. 1', '년도/월/일_2024. 4. 1', '년도/월/일_2024. 5. 1', '년도/월/일_2024. 6. 1', '년도/월/일_2024. 7. 1', '년도/월/일_2024. 8. 1', '년도/월/일_2024. 9. 1', '소사업명_유통', '소사업명_유톻', '소사업명_일반화물', '소사업명_중량물', '소사업명_컨테이너', '계약여부(유지/종료)_N', '계약여부(유지/종료)_Y', '계약주체(본사/지점)_본사', '계약주체(본사/지점)_지점', '직영/협력업체여부_직영', '직영/협력업체여부_협력업체', '기업규모_공공기관', '기업규모_대기업', '기업규모_중견기업', '기업규모_중소기업']\n","Test Feature 순서: ['실적', '화주명_KCC 당진영업소', '화주명_KCC 대죽1공장', '화주명_KCC실리콘 대죽', '화주명_KG스틸', '화주명_KG스틸(당진창고)', '화주명_KG스틸(평택창고)', '화주명_PCTC(기타-RAY)', '화주명_PTOC(돌코리아)', '화주명_PTOC(한국머스크)', '화주명_경산씨앤엘', '화주명_계양전기', '화주명_고려종합국제운송', '화주명_그린케미칼', '화주명_그린케미칼(야적장)', '화주명_대한제강', '화주명_동방', '화주명_레드캡투어', '화주명_로드스타씨앤에어', '화주명_만앤휴멜코리아', '화주명_삼미푸드웰', '화주명_삼성디스플레이', '화주명_삼성전자로지텍', '화주명_삼성중공업', '화주명_세방(롯데글로벌로지스)', '화주명_스미후루코리아', '화주명_아이디스해운항공', '화주명_에이엔씨인터내셔널', '화주명_엘에스오토모티브', '화주명_유로라인글로벌', '화주명_지티로지스틱', '화주명_청호나이스', '화주명_코오롱글로텍', '화주명_크나우프(당진공장)', '화주명_크나우프(중부창고)', '화주명_티비엠해운', '화주명_피노', '화주명_피코 운송셔틀(밀크런)', '화주명_피코이노베이션', '화주명_한화토탈', '화주명_현대글로비스', '년도/월/일_2024. 1. 1', '년도/월/일_2024. 10. 1', '년도/월/일_2024. 11. 1', '년도/월/일_2024. 12. 1', '년도/월/일_2024. 2. 1', '년도/월/일_2024. 3. 1', '년도/월/일_2024. 4. 1', '년도/월/일_2024. 5. 1', '년도/월/일_2024. 6. 1', '년도/월/일_2024. 7. 1', '년도/월/일_2024. 8. 1', '년도/월/일_2024. 9. 1', '소사업명_유통', '소사업명_일반화물', '소사업명_컨테이너', '계약여부(유지/종료)_N', '계약여부(유지/종료)_Y', '계약주체(본사/지점)_본사', '계약주체(본사/지점)_지점', '직영/협력업체여부_직영', '직영/협력업체여부_협력업체', '기업규모_대기업', '기업규모_중견기업', '기업규모_중소기업']\n"]}]},{"cell_type":"code","source":["from sklearn.linear_model import LinearRegression\n","lr = LinearRegression()\n","lr.fit(X_tr,y_tr)\n","pred = lr.predict(X_val)\n","rmse(y_val, pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7MEu6WQJSEMT","executionInfo":{"status":"ok","timestamp":1734482544606,"user_tz":-540,"elapsed":325,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"999fcc20-2986-439b-a67f-5c3352b228e6"},"id":"7MEu6WQJSEMT","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["65.50726710169494"]},"metadata":{},"execution_count":99}]},{"cell_type":"code","source":["#랜덤포레스트\n","from sklearn.ensemble import RandomForestRegressor\n","rf = RandomForestRegressor(random_state=0)\n","rf.fit(X_tr,y_tr)\n","pred = rf.predict(X_val)\n","rmse(y_val, pred)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0NfIUqv2H1uF","executionInfo":{"status":"ok","timestamp":1734482554568,"user_tz":-540,"elapsed":8455,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"4165bafb-12e7-4123-8bc7-d767570ebdf7"},"id":"0NfIUqv2H1uF","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["67.21350670975644"]},"metadata":{},"execution_count":100}]},{"cell_type":"code","source":["##XGboost\n","from xgboost import XGBRegressor\n","xgb = XGBRegressor()\n","xgb.fit(X_tr,y_tr)\n","pred = xgb.predict(X_val)\n","rmse(y_val, pred)\n","\n","pred[:10]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223},"id":"OI5kPl2tIMoa","executionInfo":{"status":"error","timestamp":1734512543289,"user_tz":-540,"elapsed":338,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"4e76f1ca-4d0b-4a52-a43a-37c72fbb2416"},"id":"OI5kPl2tIMoa","execution_count":2,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'X_tr' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-9f2dd0df6653>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mxgboost\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mXGBRegressor\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mxgb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mXGBRegressor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mxgb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_tr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_tr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mpred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxgb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_val\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mrmse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_val\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'X_tr' is not defined"]}]},{"cell_type":"code","source":["pred = rf.predict(test)\n","result = pd.DataFrame({\n","    'pred':pred\n","})\n","result.to_csv(\"result.csv\", index=False)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":545},"id":"2OsZ_9FwIMlR","executionInfo":{"status":"error","timestamp":1734482565057,"user_tz":-540,"elapsed":328,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"ecc0fdc5-19de-4534-f7c8-be811b3691ec"},"id":"2OsZ_9FwIMlR","execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"The feature names should match those that were passed during fit.\nFeature names unseen at fit time:\n- 실적\nFeature names seen at fit time, yet now missing:\n- 기업규모_공공기관\n- 년도/월/일_2016. 1. 1\n- 년도/월/일_2016. 10. 1\n- 년도/월/일_2016. 11. 1\n- 년도/월/일_2016. 12. 1\n- ...\n","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-102-cd12f38a62bf>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m result = pd.DataFrame({\n\u001b[1;32m      3\u001b[0m     \u001b[0;34m'pred'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mpred\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m })\n\u001b[1;32m      5\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"result.csv\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m   1061\u001b[0m         \u001b[0mcheck_is_fitted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1062\u001b[0m         \u001b[0;31m# Check data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1063\u001b[0;31m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_X_predict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1064\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1065\u001b[0m         \u001b[0;31m# Assign chunk of trees to jobs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36m_validate_X_predict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    639\u001b[0m             \u001b[0mforce_all_finite\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    640\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 641\u001b[0;31m         X = self._validate_data(\n\u001b[0m\u001b[1;32m    642\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    643\u001b[0m             \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mDTYPE\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, cast_to_ndarray, **check_params)\u001b[0m\n\u001b[1;32m    606\u001b[0m             \u001b[0mvalidated\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m         \"\"\"\n\u001b[0;32m--> 608\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_feature_names\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mreset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    609\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    610\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0my\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_tags\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"requires_y\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_check_feature_names\u001b[0;34m(self, X, reset)\u001b[0m\n\u001b[1;32m    533\u001b[0m                 )\n\u001b[1;32m    534\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 535\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    536\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    537\u001b[0m     def _validate_data(\n","\u001b[0;31mValueError\u001b[0m: The feature names should match those that were passed during fit.\nFeature names unseen at fit time:\n- 실적\nFeature names seen at fit time, yet now missing:\n- 기업규모_공공기관\n- 년도/월/일_2016. 1. 1\n- 년도/월/일_2016. 10. 1\n- 년도/월/일_2016. 11. 1\n- 년도/월/일_2016. 12. 1\n- ...\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"kUcgyYeDIMeC"},"id":"kUcgyYeDIMeC","execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"ozA3m2CsH1rr"},"id":"ozA3m2CsH1rr","execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"n7iRkotfH0s0"},"id":"n7iRkotfH0s0","execution_count":null,"outputs":[]},{"cell_type":"code","source":["#시각화:\n","# 실제값(y_val) vs **예측값(pred)**을 비교하는 산점도를 그려보세요.\n","\n","# plt.scatter(y_val, pred) 같은 시각화를 통해 예측이 어느 정도 잘 맞는지 시각적으로 확인할 수 있습니다.\n","import matplotlib.pyplot as plt\n","\n","plt.scatter(y_val, pred, color='blue', alpha=0.5)\n","plt.plot([y_val.min(), y_val.max()], [y_val.min(), y_val.max()], 'k--', lw=2)\n","plt.xlabel('Actual')\n","plt.ylabel('Predicted')\n","plt.title('Actual vs Predicted Values')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"ENMRXGG6fUBv","executionInfo":{"status":"ok","timestamp":1734480943248,"user_tz":-540,"elapsed":738,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"74b6b7ea-9d0c-415d-fc7e-82d282ebafce"},"id":"ENMRXGG6fUBv","execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#Residual Analysis (잔차 분석):\n","# 예측값과 실제값의 차이(잔차)를 시각화해서 확인합니다. 잔차가 랜덤하게 분포해야 좋은 모델입니다.\n","residuals = y_val - pred\n","plt.hist(residuals, bins=30, color='gray')\n","plt.title('Residuals Distribution')\n","plt.xlabel('Residuals')\n","plt.ylabel('Frequency')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"d2KTGsS5fT8p","executionInfo":{"status":"ok","timestamp":1734420048678,"user_tz":-540,"elapsed":1735,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"e79f24bd-a066-4fbc-a716-d0598da4c786"},"id":"d2KTGsS5fT8p","execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"5c80lWWxfT2v"},"id":"5c80lWWxfT2v","execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":545},"id":"Mhg9AO-tb6Jw","executionInfo":{"status":"error","timestamp":1734419724769,"user_tz":-540,"elapsed":349,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"7d7afbbd-c707-4335-a068-c079cd71fcf3"},"id":"Mhg9AO-tb6Jw","execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"The feature names should match those that were passed during fit.\nFeature names unseen at fit time:\n- 실적\nFeature names seen at fit time, yet now missing:\n- 기업규모_공공기관\n- 년도/월/일_2016. 1. 1\n- 년도/월/일_2016. 10. 1\n- 년도/월/일_2016. 11. 1\n- 년도/월/일_2016. 12. 1\n- ...\n","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-105-58d80140be85>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m result = pd.DataFrame({\n\u001b[1;32m      3\u001b[0m     \u001b[0;34m'pred'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mpred\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m })\n\u001b[1;32m      5\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"result.csv\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_base.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    304\u001b[0m             \u001b[0mReturns\u001b[0m \u001b[0mpredicted\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    305\u001b[0m         \"\"\"\n\u001b[0;32m--> 306\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_decision_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    307\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    308\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_set_intercept\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_offset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_offset\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_scale\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_base.py\u001b[0m in \u001b[0;36m_decision_function\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    283\u001b[0m         \u001b[0mcheck_is_fitted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    284\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 285\u001b[0;31m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"csr\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"csc\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"coo\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    286\u001b[0m         \u001b[0mcoef_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcoef_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    287\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcoef_\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, cast_to_ndarray, **check_params)\u001b[0m\n\u001b[1;32m    606\u001b[0m             \u001b[0mvalidated\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    607\u001b[0m         \"\"\"\n\u001b[0;32m--> 608\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_feature_names\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mreset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    609\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    610\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0my\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_tags\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"requires_y\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_check_feature_names\u001b[0;34m(self, X, reset)\u001b[0m\n\u001b[1;32m    533\u001b[0m                 )\n\u001b[1;32m    534\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 535\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    536\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    537\u001b[0m     def _validate_data(\n","\u001b[0;31mValueError\u001b[0m: The feature names should match those that were passed during fit.\nFeature names unseen at fit time:\n- 실적\nFeature names seen at fit time, yet now missing:\n- 기업규모_공공기관\n- 년도/월/일_2016. 1. 1\n- 년도/월/일_2016. 10. 1\n- 년도/월/일_2016. 11. 1\n- 년도/월/일_2016. 12. 1\n- ...\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"NnMO8hyASEKS"},"id":"NnMO8hyASEKS","execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"LPTbBFHxSEH5"},"id":"LPTbBFHxSEH5","execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"unNMblqiSEFh"},"id":"unNMblqiSEFh","execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"IfPByicISECx"},"id":"IfPByicISECx","execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 필요한 라이브러리 임포트\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from xgboost import XGBRegressor\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","import numpy as np\n","\n","# 데이터 불러오기\n","\n","\n","# 날짜 데이터 처리 함수\n","def process_date(df):\n","    df['년도'] = pd.to_datetime(df['년도/월/일']).dt.year\n","    df['월'] = pd.to_datetime(df['년도/월/일']).dt.month\n","    df['일'] = pd.to_datetime(df['년도/월/일']).dt.day\n","    df.drop(columns=['년도/월/일'], inplace=True)  # 기존 날짜 컬럼 제거\n","    return df\n","\n","# 데이터 전처리 함수\n","def preprocess_data(df, is_train=True):\n","    df = process_date(df)\n","\n","    # 범주형 변수 처리 (Label Encoding)\n","    for col in ['화주명', '계약여부', '계약주체', '기업규모']:\n","        le = LabelEncoder()\n","        df[col] = le.fit_transform(df[col])\n","\n","    # 학습 데이터의 경우 target 분리\n","    if is_train:\n","        X = df.drop(columns=['실적'])\n","        y = df['실적']\n","        return X, y\n","    else:\n","        return df\n","\n","# Train 데이터 처리\n","X_train, y_train = preprocess_data(train_data)\n","X_test, y_test = preprocess_data(test_data)\n","\n","# Predict 데이터 처리 (2025년)\n","predict_features = preprocess_data(predict_data, is_train=False)\n","\n","# 모델 학습\n","model = XGBRegressor(n_estimators=100, learning_rate=0.1, random_state=42)\n","model.fit(X_train, y_train)\n","\n","# 모델 평가 (2024년 Test 데이터 사용)\n","y_pred = model.predict(X_test)\n","rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n","mae = mean_absolute_error(y_test, y_pred)\n","print(f\"Test RMSE: {rmse}\")\n","print(f\"Test MAE: {mae}\")\n","\n","# 2025년 데이터 예측\n","predict_data['예측실적'] = model.predict(predict_features)\n","\n","# 결과 저장\n","predict_data.to_csv('predicted_2025.csv', index=False)\n","print(\"2025년 예측 결과가 'predicted_2025.csv'에 저장되었습니다.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":582},"id":"CWgfXSgcFGB9","executionInfo":{"status":"error","timestamp":1734414868382,"user_tz":-540,"elapsed":327,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"5154f6f6-a750-4aee-a218-11219bebe6b3"},"id":"CWgfXSgcFGB9","execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"'년도/월/일'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3804\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3805\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3806\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: '년도/월/일'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-48-22c4ce0176a1>\u001b[0m in \u001b[0;36m<cell line: 38>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;31m# Train 데이터 처리\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m \u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpreprocess_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpreprocess_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-48-22c4ce0176a1>\u001b[0m in \u001b[0;36mpreprocess_data\u001b[0;34m(df, is_train)\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m# 데이터 전처리 함수\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mpreprocess_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mis_train\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m     \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprocess_date\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m     \u001b[0;31m# 범주형 변수 처리 (Label Encoding)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-48-22c4ce0176a1>\u001b[0m in \u001b[0;36mprocess_date\u001b[0;34m(df)\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;31m# 날짜 데이터 처리 함수\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mprocess_date\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m     \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'년도'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_datetime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'년도/월/일'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0myear\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m     \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'월'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_datetime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'년도/월/일'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmonth\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m     \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'일'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_datetime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'년도/월/일'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mday\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4100\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4101\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4102\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4103\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4104\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3810\u001b[0m             ):\n\u001b[1;32m   3811\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mInvalidIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3812\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3813\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3814\u001b[0m             \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: '년도/월/일'"]}]},{"cell_type":"code","source":[],"metadata":{"id":"ZhvgBybyKycn"},"id":"ZhvgBybyKycn","execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"SmI5U_l_Kyag"},"id":"SmI5U_l_Kyag","execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"_Mmu10A2KyYg"},"id":"_Mmu10A2KyYg","execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"9C9WtDJxKyWf"},"id":"9C9WtDJxKyWf","execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"EASG12h2KyUX"},"id":"EASG12h2KyUX","execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"q96bJvRjKySR"},"id":"q96bJvRjKySR","execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"2OiTeaViKyQP"},"id":"2OiTeaViKyQP","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"},"colab":{"provenance":[{"file_id":"12Wg3KhBAAfT2W3iU3gnY7FycSomjVW6u","timestamp":1734412480094}]}},"nbformat":4,"nbformat_minor":5}
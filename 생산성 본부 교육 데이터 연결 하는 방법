{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":41},"id":"DqppCpN7uTZe","outputId":"73aece74-ffd0-4d17-a613-e78b6d0f6d03"},"outputs":[{"data":{"text/html":["\n","     <input type=\"file\" id=\"files-0f77e0bb-1236-42df-b72d-e3a0af2639bc\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-0f77e0bb-1236-42df-b72d-e3a0af2639bc\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"}],"source":["#통계청 마이크로데이터 -> 데이터 참고\n","\n","#텍스트 마이닝\n"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lrUzZE6iHxeA","executionInfo":{"status":"ok","timestamp":1732254811879,"user_tz":-540,"elapsed":2680,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"91553c1e-562f-46ad-e43c-ded88f64818d"},"outputs":[{"output_type":"stream","name":"stdout","text":["        일평균 유동인구  일평균 남성 유동인구  일평균 여성 유동인구\n","0     674.955328   293.712131   381.243197\n","1     253.775847   115.833087   137.942759\n","2     245.529235   106.426639   139.102596\n","3     500.077678   217.690710   282.386967\n","4     941.263142   425.826913   515.436229\n","...          ...          ...          ...\n","1334  468.971530   223.312514   245.659016\n","1335   34.129290    17.068661    17.060628\n","1336   92.703525    46.389727    46.313798\n","1337  121.696858    60.894672    60.802186\n","1338  100.922240    46.032295    54.889945\n","\n","[1339 rows x 3 columns]\n"]}],"source":["import io\n","import pandas as pd\n","data = pd.read_csv('유동인구데이터.csv', encoding = 'cp949',\n","                   usecols = ['일평균 유동인구', '일평균 남성 유동인구', '일평균 여성 유동인구'])\n","print(data)\n","\n","#encoding 사용해서 에러 발생 안하게 하기\n","#usecols 는 사용할 컬럼만 골라주는 함수"]},{"cell_type":"code","source":["import numpy as np\n","data = pd.read_csv('유동인구데이터.csv', encoding = 'cp949',\n","                   usecols = ['일평균 유동인구'])\n","data_array = data.to_numpy()\n","\n","minimnum = np.min(data_array)\n","maximum = np.max(data_array)\n","summation = np.sum(data_array)\n","average = np.average(data_array)\n","stddey = np.std(data_array)\n","\n","print(minimnum)\n","print(maximum)\n","print(summation)\n","print(average)\n","print(stddey)\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y2SfYAl6VT8b","executionInfo":{"status":"ok","timestamp":1732254831730,"user_tz":-540,"elapsed":288,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"3578e5b1-5aa3-4886-e62f-2db19688ae82"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["2.667238806\n","18088.25167\n","1275031.388787564\n","952.2265786314891\n","1174.7316948721464\n"]}]},{"cell_type":"code","execution_count":4,"metadata":{"id":"2W_6mvwbiNGO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732254845755,"user_tz":-540,"elapsed":311,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"9d101c36-b7c9-445b-8d28-a9381be6a4d5"},"outputs":[{"output_type":"stream","name":"stdout","text":["[16, 18, 17, 18, 0, 19, 20, 22, 21, 0, 21, 22]\n","[16, 18, 17, 18, 18.5, 19, 20, 22, 21, 21.0, 21, 22]\n","19.458333333333332\n","16.0\n","1.9089518648258845\n"]}],"source":["#이렇게 리스트 형태의 자료로는 data.mean() 이런게 안됨\n","# 그래서 numpy를 사용해서 np.average()이런식으로 해야함\n","\n","data = [ 16, 18, 17, 18, 0, 19, 20, 22, 21, 0, 21, 22]\n","print(data)\n","\n","for i in range(0, len(data)):\n","    if data[i] == 0 and i >0:\n","        data[i] = (data[i-1] + data[i+1]) / 2\n","print(data)\n","print(np.average(data))\n","print(np.min(data))\n","print(np.std(data))\n","\n"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"GPqDrDgidgaf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732254852830,"user_tz":-540,"elapsed":7,"user":{"displayName":"정인승[PTKSL - JEONG IN SEONG] ‍","userId":"11777570631850391267"}},"outputId":"eab4f49e-cebf-4c4d-c986-e414a516efb3"},"outputs":[{"output_type":"stream","name":"stdout","text":["[16, 18, 17, 18, 0, 19, 20, 22, 21, 0, 21, 22]\n","[16, 18, 17, 18, 19, 20, 22, 21, 21, 22]\n","19.4\n","16\n","2.009975124224178\n"]}],"source":["#remove 함수와 반복문을 사용해서 0을 모두 지우기\n","data = [ 16, 18, 17, 18, 0, 19, 20, 22, 21, 0, 21, 22]\n","print(data)\n","\n","numOfZeros = 0\n","\n","#0의 개수를 카운트해라\n","for i in range(0, len(data)):\n","    if data[i] == 0:\n","        numOfZeros = numOfZeros + 1\n","\n","#remove 데이터는 가장 먼저 나오는 0만 지우기 때문에 반복문을 사용해서 뒤에꺼 까지 다 지우게해야함\n","\n","for i in range(0, numOfZeros):\n","    data.remove(0)\n","\n","\n","print(data)\n","print(np.average(data))\n","print(np.min(data))\n","print(np.std(data))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wyTq5KJpmL57"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0Y0kmJlYmL3s"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TTd8AMhGmLw2"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AMKT0qNnmLul"},"outputs":[],"source":[]}],"metadata":{"colab":{"provenance":[{"file_id":"18EYXWCh5qnVbjAGoxZS0Pu1q_zGQtHxy","timestamp":1732254750867},{"file_id":"1frn5NUlzxsT7VrWlwR6i8gI_KP0xwZdk","timestamp":1732159699547},{"file_id":"1MPGnBHHv2u6aQypHiwTInOfgO0kHxZS7","timestamp":1731656949138},{"file_id":"1zBamhJ3ZSpiln-5bDMm5US5Dk27zB3Zj","timestamp":1730713143358}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}